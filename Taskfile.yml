version: "3"

silent: true

dotenv:
  - ".env"

vars:
  K8S_PATH: "./k8s"
  OUTPUT_PATH: "./.out"

  # Params
  TARGET: ""

tasks:
  _verify-node:
    internal: true
    preconditions:
      - msg: "Node.js is not installed. Please install it from https://nodejs.org/en/download/"
        sh: "command -v npm"
  _verify-azcli:
    internal: true
    preconditions:
      - msg: "Azure CLI is not installed. Please install it from https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
        sh: "command -v az"
  _verify-kubetools:
    internal: true
    preconditions:
      - msg: "kubectl is not installed. Please install it from https://kubernetes.io/docs/tasks/tools/install-kubectl/"
        sh: "command -v kubectl"
      - msg: "helm is not installed. Please install it from https://helm.sh/docs/intro/install/"
        sh: "command -v helm"
      - msg: "kustomize is not installed. Please install it from https://kubectl.docs.kubernetes.io/installation/kustomize/"
        sh: "command -v kustomize"
  _verify-target-var:
    internal: true
    preconditions:
      - msg: "TARGET var is required"
        sh: test "{{.TARGET}}" != ""

  build:
    desc: "Build the k8s manifests"
    deps:
      - _verify-kubetools
      - _verify-target-var
    preconditions:
      - msg: "Target directory '{{.OVERLAY_DIR}}' does not exist"
        sh: test -d "{{.OVERLAY_DIR}}"
    vars:
      DIR_NAME:
        sh: dirname "{{.TARGET}}"
      OVERLAY_DIR: "{{.K8S_PATH}}/overlays/{{.TARGET}}"
    cmds:
      - mkdir -p "{{.OUTPUT_PATH}}/{{.DIR_NAME}}"
      - kustomize build --enable-helm --enable-alpha-plugins=true "{{.OVERLAY_DIR}}" > "{{.OUTPUT_PATH}}/{{.TARGET}}".yml

  validate:
    deps: [build]
    desc: "Validate the k8s manifests"
    cmd: kubectl apply --dry-run=client -f "{{.OUTPUT_PATH}}/{{.TARGET}}".yml

  deploy:
    deps: [build]
    prompt: "Deploy the k8s manifests to {{.TARGET}}?"
    desc: "Deploy the k8s manifests"
    cmd: kubectl apply -f "{{.OUTPUT_PATH}}/{{.TARGET}}".yml

  destroy:
    deps:
      - _verify-kubetools
      - _verify-target-var
    prompt: "Destroy the k8s manifests in {{.TARGET}}?"
    desc: "Destroy the k8s manifests"
    cmd: kubectl delete -f "{{.OUTPUT_PATH}}/{{.TARGET}}".yml

  az-login:
    deps: [_verify-azcli]
    desc: "Login to Azure"
    cmd: az login --use-device-code --tenant $AZURE_TENANT_ID

  az-setsub:
    deps: [_verify-azcli]
    desc: "Set the Azure subscription"
    cmd: az account set --subscription $AZURE_SUBSCRIPTION_ID

  az-deploy:
    deps: [az-setsub]
    desc: "Deploy Azure infrastructure"
    prompt: "Deploy bicep infra to Azure?"
    cmd: az deployment sub create --location southeastasia -f ./infra/main.bicep --parameters publicDnsZoneName=$PUBLIC_DOMAIN

  az-destroy:
    deps: [az-setsub]
    desc: "Destroy Azure infrastructure"
    prompt: "Destroy bicep infra on Azure?"
    cmds:
      - az deployment group create -g rg-secret-dev-sea-01 -f ./infra/delete.bicep --mode Complete
      - az deployment group create -g rg-network-dev-sea-01 -f ./infra/delete.bicep --mode Complete
      - az deployment group create -g rg-aks-dev-sea-01 -f ./infra/delete.bicep --mode Complete

  az-aksconnect:
    deps: [az-setsub]
    desc: "Connect to AKS cluster"
    cmd: az aks get-credentials -g $AKS_RG --name $AKS_NAME

  az-populatesecrets:
    deps: [az-setsub]
    desc: "Populate secrets in Azure Key Vault"
    prompt: "Populate Secrets to KeyVault?"
    cmds:
      - az keyvault secret set --vault-name $KEYVAULT_NAME --name "redis-password" --value "$REDIS_PASSWORD"
      - az keyvault secret set --vault-name $KEYVAULT_NAME --name "Postgresql-User-Password" --value "$POSTGRESQL_USER_PASSWORD"
      - az keyvault secret set --vault-name $KEYVAULT_NAME --name "Postgresql-Password" --value "$POSTGRESQL_PASSWORD"
      - az keyvault secret set --vault-name $KEYVAULT_NAME --name "Mailpit-Ui-Password" --value "$MAILPIT_UI_PASSWORD"
      - az keyvault secret set --vault-name $KEYVAULT_NAME --name "Saleor-Secret-Key" --value "$SALEOR_SECRET_KEY"

  az-showoidc:
    deps: [az-setsub]
    desc: "Show OIDC issuer URL"
    cmd: az aks show -n $AKS_NAME -g $AKS_RG --query "oidcIssuerProfile.issuerUrl" -otsv

  az-createfed:
    deps: [az-setsub]
    desc: "Create file share in Azure"
    cmds:
      - |
        az identity federated-credential create \
        --identity-name "$AKS_WORKLOAD_NAME" \
        --resource-group "$AKS_RG" \
        --issuer "$AKS_OIDC_ISSUER" \
        --name fed-app-saleor-saleor \
        --subject system:serviceaccount:app-saleor:saleor
      - |
        az identity federated-credential create \
        --identity-name "$AKS_WORKLOAD_NAME" \
        --resource-group "$AKS_RG" \
        --issuer "$AKS_OIDC_ISSUER" \
        --name fed-app-mailpit-mailpit \
        --subject system:serviceaccount:app-mailpit:mailpit
      - |
        az identity federated-credential create \
        --identity-name "$AKS_WORKLOAD_NAME" \
        --resource-group "$AKS_RG" \
        --issuer "$AKS_OIDC_ISSUER" \
        --name fed-data-redis-redis-master \
        --subject system:serviceaccount:data-redis:redis-master
      - |
        az identity federated-credential create \
        --identity-name "$AKS_WORKLOAD_NAME" \
        --resource-group "$AKS_RG" \
        --issuer "$AKS_OIDC_ISSUER" \
        --name fed-data-postgresql-postgresql \
        --subject system:serviceaccount:data-postgresql:postgresql
      - |
        az identity federated-credential create \
        --identity-name "$AKS_WORKLOAD_NAME" \
        --resource-group "$AKS_RG" \
        --issuer "$AKS_OIDC_ISSUER" \
        --name fed-network-cert-manager-cert-manager \
        --subject system:serviceaccount:network-cert-manager:cert-manager
      - |
        az identity federated-credential create \
        --identity-name "$AKS_WORKLOAD_NAME" \
        --resource-group "$AKS_RG" \
        --issuer "$AKS_OIDC_ISSUER" \
        --name fed-demo-cert-manager \
        --subject system:serviceaccount:demo:workload-identity-sa

  az-forward:
    deps: [aks-connect]
    desc: "Forward ports from K8s to local"
    cmds:
      - kubectl port-forward services/mailpit-ui 8025:8025
      - kubectl port-forward services/saleor-core 8000:8000
      - kubectl port-forward services/saleor-dashboard 9000:80
      - kubectl port-forward services/jaeger-query 16686:16686

  minikube:
    deps: [_verify-kubetools]
    desc: "Set minikube as the k8s context"
    cmds:
      - minikube start --driver=docker
      - kubectl config use-context minikube
